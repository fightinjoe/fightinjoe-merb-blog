#!/usr/bin/env ruby

require 'rake/tasklib'

OUTPUT    = "doc/html"             # HTML Output
APIOUT    = "doc/html/api"         # HTML API Output
CSSFILE   = "../../api.css"        # CSS File relative to APIOUT

TEMPLATE  = ENV['RDOC_TEMPLATE'] || 'html'

COREFILES = []
MOREFILES = []

require 'fileutils'
require 'rdoc/markup/simple_markup'
require 'rdoc/markup/simple_markup/to_html'

desc "Generate html documentation"
task :doc => ['doc:clear', 'doc:core', 'doc:more', 'doc:caps']

#task :docs => [APIOUT] do
#  docs = []
#  docfiles = Dir['lib/facets/*'] #- corefiles
#  docfiles.each do |lib|
#    base = File.basename(lib)
#    name = base.chomp('.rb')
#    if File.directory?(lib)
#      file = lib+'.rb'
#      if File.file?(file)
#        docs << Doc.new(file, lib)
#      end
#    else
#      unless File.directory?(lib.chomp('.rb'))
#        docs << Doc.new(lib)
#      end
#    end
#  end
#  docs.each do |doc|
#    doc.generate
#  end
#end

namespace :doc do

  task :files => [:corefiles, :morefiles]

  task :corefiles do
    files = File.read('lib/facets/core.rb').split(/\n/).collect do |line|
      next if /^\s*[#]/.match(line)
      md = /require ["'](.*?)["']/.match(line)
      md ? md[1] : nil
    end.compact.collect{ |f| 'lib/' + f }
    corefiles = []
    files.each do |f|
      corefiles << f if File.exist?(f)
      frb = f + '.rb'
      corefiles << frb if File.exist?(frb)
    end
    COREFILES.replace(corefiles)
  end

  task :morefiles => [:corefiles] do
    morefiles = Dir['lib/facets/*'] #- corefiles
    morefiles -= COREFILES
    MOREFILES.replace(morefiles)
  end

  task :core => [:corefiles, "#{APIOUT}/core"]
  task :more => [:morefiles, "#{APIOUT}/more"]

  file "#{APIOUT}/core" do
    sh "rdoc -a -S -t'Facets Core API' -T #{TEMPLATE} -m README --op '#{APIOUT}/core' #{COREFILES.join(' ')} [A-Z]*"
  end

  file "#{APIOUT}/more" do
    sh "rdoc -a -S -t'Facets More API' -T #{TEMPLATE} -m README --op '#{APIOUT}/more' #{MOREFILES.join(' ')} [A-Z]*"
  end

#  task :json => ["#{OUTPUT}/list.json"]
#
#  file "#{OUTPUT}/list.json" => [:files, OUTPUT] do
#    corenames = COREFILES.collect do |lib|
#      base = File.basename(lib)
#      base.chomp('.rb')
#    end.uniq.sort
#    morenames = MOREFILES.collect do |lib|
#      base = File.basename(lib)
#      base.chomp('.rb')
#    end.uniq.sort
#    list = {'core'=>corenames, 'more'=>morenames}
#    File.open("#{OUTPUT}/list.json", "w") do |f|
#      f << list.inspect.gsub('=>', ': ')
#    end
#  end

  directory OUTPUT do
    FileUtils.mkdir_p(OUTPUT)
  end

  directory APIOUT do
    FileUtils.mkdir_p(APIOUT)
  end

  task :clear do
    FileUtils.rm_r(APIOUT) if File.exist?(APIOUT)
  end

  #desc "Generate capfiles html"
  task :caps do
    capfiles = Dir.glob('[A-Z]*') - ['Rakefile']
    capfiles.each do |capfile|
      out = Doc.convert(File.read(capfile))
      out = %{
        <html>
        <head>
          <title>#{capfile}</title>
          <link href="api.css" rel="stylesheet" type="text/css">
        </head>
        <body>
          <div class="content">
          <div class="main">
            #{out}
          </div>
          </div>
        </body>
        </html>
      }
      File.open("#{OUTPUT}/#{capfile.downcase}.html", 'w') do |f|
        f << out
      end
    end
  end

end

# NOT FULLY USED -- BUT MAY BE IN FUTURE

class Doc

  def self.markup
    @markup ||= SM::SimpleMarkup.new
  end

  def self.smhtml
    @smhtml ||= SM::ToHtml.new
  end

  def self.convert(source)
    markup.convert(source, smhtml)
  end

  attr :files

  def initialize(*files)
    @files = files
    @main = files.find{ |f| File.file?(f) }
  end

  def output
    APIOUT
  end

  def template
    TEMPLATE
  end

  def name
    File.basename(@main).chomp('.rb').downcase
  end

  def title
    File.basename(@main).chomp('.rb').capitalize
  end

  def body
    lib = @main
    src = ""
    File.readlines(lib).each do |line|
      src << line.sub(/^\s*#/, '')
      break if line !~ /\S/
    end
    self.class.convert(src)
  end

  def document
    %{
      <html>
      <head>
        <title>#{title}</title>
        <link href="#{CSSFILE}" rel="stylesheet" type="text/css">
      </head>
      <body>
        <div class="content">
          <div class="nav">
            <a href="rdoc/index.html">RDOC API</a>
          </div>
          <div class="main">
            #{body}
          </div>
        </div>
      </body>
      </html>
    }
  end

  def generate
    rdoc
    save
  end

  def save
    File.open("#{output}/#{name}/index.html", "w") do |f|
      f << document
    end
  end

  # -s'../../style-rdoc.css'
  def rdoc
    cmd = "rdoc -S -t'Facets #{title}' -T #{template} --op '#{output}/#{name}/rdoc' #{files.join(' ')}"
    puts cmd if $VERBOSE
    system cmd
  end

end

# If run as stand-alone script.

if __FILE__ == $0
  Rake::Task['doc'].invoke
end

